<script>
	import { onMount } from 'svelte'
	import { addLog } from './_store'
	console.log('Engine init!')
	function throwDice(min, max) {
		min = Math.ceil(min)
		max = Math.floor(max)
		return Math.floor(Math.random() * (max - min)) + min
	}

	let playerPoints = 'player_points'
	let playerHealthBar = 'player_bar'


	let enemys = [
		{
			name: '👾 Goblin Warrior',
			health: 12,
			maxHealth: 12,
			pointsId: 'enemy_points',
			healthbarId: 'enemy_bar',
			hardAttackDamage: 4,
			hardAttackDice: 8,
			weakAttackDamage: 2,
			weakAttackDice: 3
		}
	]
	let player = {
		name: '🧝‍♂️ Elf Knight',
		health: 30,
		maxHealth: 30,
		pointsId: 'player_points',
		healthbarId: 'player_bar',
		hardAttackDamage: 4,
		hardAttackDice: 8,
		weakAttackDamage: 2,
		weakAttackDice: 3,
		attacks: [
			[
				'Shield Bash',
				2,
				3,
				'🛡️ You are trying to bash the opponent away with your shield ...',
				'💫 The enemy dodges your attack ...'
			],
			[
				'Mace Attack',
				6,
				6,
				'🔨 You are trying hit the enemy with a huge mace ...',
				'💫 The enemy dodges your attack ...'
			],
			[
				'Magic Attack',
				1,
				4,
				'🌀 You are trying to cast a spell on your opponent ...',
				'💫 The enemy dodges your attack ...'
			]
		],
		attackLabel: ['Name', 'Damage', 'Dicer', 'Info', 'Failed']
	}

	let turn = 1

	let playerHealth = 30
	let playerHealthMax = 30
	let playerPercent = '100%'

	let enemyHealth = 30
	let enemyHealthMax = 30
	let enemyPercent = '100%'

	let roundCount = '⌛ Turn'
	let locked
	

	function opponent(
		name,
		health,
		maxHealth,
		pointsId,
		healthbarId,
		hardAttackDamage,
		hardAttackDice,
		weakAttackDamage,
		weakAttackDice
	) {
		this.name = name
		this.health = health
		this.maxHealth = maxHealth
		this.pointsId = pointsId
		this.healthbarId = healthbarId
		this.attack = async function () {
			let x = throwDice(1, 10)
			let attackMessage = name + ' attempt to attack...'
			logText(attackMessage, 'primary')
			await sleep(1000)
			if (x >= hardAttackDice) {
				damageTaken('attacke', 'enemyBox')
				playerHealth = playerHealth - hardAttackDamage
				healthBarUpdate(
					playerHealth,
					playerHealthMax,
					playerPoints,
					playerHealthBar
				)
				// logText('The enemy waves his spear at you');
				let damageText =
					'⚔️ You take ' + hardAttackDamage + ' points of critical damage'
				logText(damageText, 'warning')
				damageTaken('damages', 'playerBox')
			} else if (x > weakAttackDice && x < hardAttackDice) {
				damageTaken('attacke', 'enemyBox')
				playerHealth = playerHealth - weakAttackDamage
				healthBarUpdate(
					playerHealth,
					playerHealthMax,
					playerPoints,
					playerHealthBar
				)
				// logText('The enemy charges at you with a spear');
				let damageText = '⚔️ You take ' + weakAttackDamage + ' points of damage'
				logText(damageText, 'warning')
				damageTaken('damages', 'playerBox')
			} else {
				logText('💫 The opponent stumbles over his own feet', 'success')
				damageTaken('attacke', 'enemyBox')
				damageTaken('playermiss', 'playerBox')
			}
		}
	}

	//Enemies
	let goblin = new opponent(
		'👾 Goblin Warrior',
		12,
		12,
		'enemy_points',
		'enemy_bar',
		4,
		8,
		2,
		3
	)

	let playerAttacks = [
		// ['Attack Name','Base Damage', 'Base Dice success', 'Attack Description', 'Miss Description'],
		[
			'Shield Bash',
			2,
			3,
			'🛡️ You are trying to bash the opponent away with your shield ...',
			'💫 The enemy dodges your attack ...'
		],
		[
			'Mace Attack',
			6,
			6,
			'🔨 You are trying hit the enemy with a huge mace ...',
			'💫 The enemy dodges your attack ...'
		],
		[
			'Magic Attack',
			1,
			4,
			'🌀 You are trying to cast a spell on your opponent ...',
			'💫 The enemy dodges your attack ...'
		]
	]

	function logText(string, type = 'warning') {
		addLog({ message: string, type, dismissible: true, timeout: 9000 })
	}

	function turnCounterUpdate(turn) {
		roundCount = '⌛ Turn ' + turn
		logText(roundCount, 'dark')
	}

	async function damageTaken(animationClass, targetId) {
		// console.log("Animate Damage Player", animationClass, targetId);
		await sleep(500)
		console.error('Animate class: ', animationClass, targetId)
	}

	function lockActionButtons(condition) {
		locked = condition
	}

	function healthBarUpdateXXX(
		objectHealth,
		objectHealthMax,
		pointsClass,
		healthBar
	) {
		document.getElementById(pointsClass).innerHTML = objectHealth
		// x = 10 * objectHealth;
		x = (objectHealth / objectHealthMax) * 100
		document.getElementById(healthBar).style.width = x + '%'
	}

	function healthBarUpdate(
		objectHealth,
		objectHealthMax,
		pointsClass,
		healthBar
	) {
		// x = 10 * objectHealth;
		let x = (objectHealth / objectHealthMax) * 100
		playerPercent = x + '%'
	}
	function healthBarUpdateA(
		objectHealth,
		objectHealthMax,
		pointsClass,
		healthBar
	) {
		let x = (objectHealth / objectHealthMax) * 100
		playerPercent = x + '%'
	}
	function healthBarUpdateB(
		objectHealth,
		objectHealthMax,
		pointsClass,
		healthBar
	) {
		// x = 10 * objectHealth;
		let x = (objectHealth / objectHealthMax) * 100
		playerPercent = x + '%'
	}

	function resetHealth() {
		turn = 0
		logText('-------------------')
		logText('RESET')
		logText('-------------------')
		goblin.health = goblin.maxHealth
		healthBarUpdate(
			goblin.health,
			goblin.maxHealth,
			goblin.pointsId,
			goblin.healthbarId
		)
		playerHealth = playerHealthMax
		healthBarUpdate(
			playerHealth,
			playerHealthMax,
			playerPoints,
			playerHealthBar
		)
	}

	function sleep(ms = 10) {
		return new Promise((resolve) => setTimeout(resolve, ms))
	}

	async function weaponAttack(
		attackDescription,
		successDice,
		damage,
		missDescription
	) {
		console.log('weaponAttack(successDice, damage)', successDice, damage)

		lockActionButtons(true)
		turn = turn + 1
		let x = throwDice(1, 10)
		let _del = throwDice(100, 900)
		await sleep(1000 + _del)

		if (goblin.health > 0) {
			logText(attackDescription, 'info')
			await sleep(1000)
			damageTaken('swing', 'playerBox')
			if (x > successDice) {
				goblin.health = goblin.health - damage
				damageTaken('damages', 'enemyBox')
				healthBarUpdate(
					goblin.health,
					goblin.maxHealth,
					goblin.pointsId,
					goblin.healthbarId
				)
				let damagedeal =
					'⚔️ You successfully deal ' +
					damage +
					' points of damage to the opponent'
				logText(damagedeal, 'success')
			} else {
				logText(missDescription, 'danger')
				damageTaken('enemymiss', 'enemyBox')
			}
			await sleep(1000)
			if (goblin.health > 0) {
				goblin.attack()
			} else {
				logText('☠️ Creatura is dead', 'danger')
			}
			await sleep(2000)
			turnCounterUpdate(turn)
			lockActionButtons(false)
		} else {
			logText('☠️ Creatura is dead', 'danger')
			lockActionButtons(false)
		}

		await sleep(1000)
		lockActionButtons(false)
	}

	const attacFuncA = () =>
		weaponAttack(
			playerAttacks[0][3],
			playerAttacks[0][2],
			playerAttacks[0][1],
			playerAttacks[0][4]
		)

	const attacFuncB = () =>
		weaponAttack(
			playerAttacks[1][3],
			playerAttacks[1][2],
			playerAttacks[1][1],
			playerAttacks[1][4]
		)

	const attacFuncC = () =>
		weaponAttack(
			playerAttacks[2][3],
			playerAttacks[2][2],
			playerAttacks[2][1],
			playerAttacks[2][4]
		)

	const attackCtrs = [
		['🛡️ Shield Bash', attacFuncA],
		['🔨 Mace Attack', attacFuncB],
		['🌀 Magic Attack', attacFuncC]
	]
	onMount(() => {
		console.log('Engine mounted!')
		// healthBarUpdate(
		// 	goblin.health,
		// 	goblin.maxHealth,
		// 	goblin.pointsId,
		// 	goblin.healthbarId
		// )
		// healthBarUpdate(
		// 	playerHealth,
		// 	playerHealthMax,
		// 	playerPoints,
		// 	playerHealthBar
		// )

		// enemyName = goblin.name
		turnCounterUpdate(turn)
	})
</script>

<!--     <button class="actionbutton" onclick="resetHealth();">🔄 Reset</button> -->

<div class="arena">
	<div id="playerBox" class="box">
		<div class="info">
			<h1>🧝‍♂️ Elf Knight</h1>
			<h5>Player</h5>
		</div>
		<div class="stats">
			<div class="health">
				<div id="player_bar" class="bar" style="width: 93.3333%;">
					<span id="player_points">28</span>
				</div>
			</div>
		</div>
	</div>
	<div id="enemyBox" class="box">
		<div class="info">
			<h1 id="enemyName">👾 Goblin Warrior</h1>
			<h5>Enemy</h5>
		</div>
		<div class="stats">
			<div class="health">
				<!--    <div id="enemy_bar" class="bar" style="width: 100%;">
         <span id="enemy_points">12</span>
       </div> -->
			</div>
		</div>
	</div>
</div>

<header>
	<div class="d-grid py-4 gap-4">
		<div class="info">
			<h1 id="enemyName">👾 Goblin Warrior</h1>
			<h5>Enemy</h5>
		</div>
		<div
			class="progress"
			role="progressbar"
			id="enemy_bar"
			aria-valuenow="0"
			aria-valuemin="0"
			aria-valuemax="100">
			<div
				id="enemy_points"
				class="progress-bar"
				style="width: {playerPercent}">
				12
			</div>
		</div>
		<div
			class="progress"
			role="progressbar"
			aria-label="Basic example"
			aria-valuenow="25"
			aria-valuemin="0"
			aria-valuemax="100">
			<div class="progress-bar" style="width: 25%" />
		</div>
	</div>
	<div class="d-grid py-4 gap-4">
		<div class="info">
			<h1 id="enemyName">👾 Goblin Warrior</h1>
			<h5>Enemy</h5>
		</div>
		<div
			class="progress"
			role="progressbar"
			id="enemy_bar"
			aria-valuenow="0"
			aria-valuemin="0"
			aria-valuemax="100">
			<div
				id="enemy_points"
				class="progress-bar"
				style="width: {playerPercent}">
				12
			</div>
		</div>
		<div
			class="progress"
			role="progressbar"
			aria-label="Basic example"
			aria-valuenow="25"
			aria-valuemin="0"
			aria-valuemax="100">
			<div class="progress-bar" style="width: 25%" />
		</div>
	</div>
</header>

<div class="py-4">
	<div class="fs-4">
		{enemyName}
	</div>
	<div class="btn-group" role="group" aria-label="Button group name">
		{#each attackCtrs as [label, func]}
			<button
				on:click={func}
				type="button"
				class="btn btn-light"
				disabled={locked}>{label}</button>
		{/each}
	</div>
</div>
